/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   main.cpp
 * Author: Zach Ellis
 *
 * Created on November 11, 2016, 1:10 AM
 */

#include <cstdlib>

using namespace std;

/*
 * 
 */
#include <iostream>
using namespace std;
#include <stdio.h>  
#include <math.h>
#include <string.h>  
   

int pow(int, int );


template<class T> int size(T *ptr)//int size(const char *ptr)
{
    //iterator
    int i = 0;
    
    int count = 0;

    //While loop that tests whether the end of the array has been reached
   while (*(ptr + i) != '\0')
    {
        //increment the count variable
        ++count;
        //advance to the next element of the array
        ++i;
    } 
    //return the size of the array
    return count;
}

//Don't need for Convert
char * constCopy(const char *);

char * intToChar(int, char *);
char * Convert(const char *);

int main() {

	
	const char *hexadecimal = new char[30];
        hexadecimal = "240F";  
	
        cout << endl << hexadecimal << " in hexadecimal converts to " << Convert(hexadecimal) << "in decimal" << endl;

	char *decimalNumber  = new char[40];
  
        decimalNumber = Convert(hexadecimal);
        
        printf("Decimal char* = %s\n", decimalNumber);
	
	return 0;
}

int pow(int base, int exponent)
{
    int result=1;
    
    //Loop multiply the base by itself.
    if(exponent==0)
    {
       
        return result;
    }
    while (exponent != 0)
    {
        result *= base;
        --exponent;
    }
    return result;
}


//Idk if I'm over thinking not using libraries. this is pretty annoying 
char * constCopy(const char *ptr) 
{
    //iterator
    int i = 0;
    int strSize = 0;
    strSize = size(ptr);
    
  char *copy = new char [strSize];
    
    int count = 0;

    //While loop that tests whether the end of the array has been reached
   while (*(ptr + i) != '\0')
    {
        //increment the count variable
        copy[i]=ptr[i];
        //advance to the next element of the array
        ++i;
    } 
    //return the size of the array
    return copy;
}

//recursive intToChar 
char * intToChar(int i, char *p)
{
    //recursive base case
    if (i / 10 == 0) {
        // No more digits.
        *p++ = i + '0';
        *p = '\0';
        return p;
    }

    p = intToChar(i / 10, p);
    *p++ = i % 10 + '0';
    *p = '\0';
    return p;
}

char * Convert(const char *pHexString)
{
    //do i even need a copy? why did i make all these functions to copy it?
    //I remember I was having trouble with the const typing. did i need to solve that this way?
    long decimalNumber=0;
    char * decimalString = new char[40];
    
    char hexDigits[16] = {'0', '1', '2', '3', '4', '5', '6', '7', '8',
      '9', 'A', 'B', 'C', 'D', 'E', 'F'};
    
    int i, j, power=0; // digit;  
    int hexStrSize = size(pHexString);
 
    /* Converting hexadecimal number to decimal number */
    for(i=hexStrSize-1; i >= 0; i--) {
        /*search currect character in hexDigits array */
        for(j=0; j<16; j++){
            if(pHexString[i] == hexDigits[j]){
                decimalNumber += j*pow(16, power);
            }
        }
        power++;
    } 
    
    intToChar(decimalNumber,decimalString);

    return decimalString;
}
